---
import '@fontsource/vt323';
import '@fontsource/space-mono';
import Footer from '../components/Footer.astro';
import avatar from '../assets/avatar.jpg';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Njerii's Personal Website" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={avatar.src} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <canvas id="bgCanvas"></canvas>
    <div class="content-wrapper">
      <nav>
        <div class="nav-content">
          <div class="logo">ãƒ³ã‚¸ã‚§ãƒªãƒ¼</div>
          <div class="nav-links">
            <a href="/">Blog</a>
            <a href="/lab">Lab Notes</a>
            <a href="/about">About</a>
            <button id="theme-toggle" aria-label="Toggle theme">
              <span class="theme-icon">ðŸŒ¸</span>
            </button>
          </div>
        </div>
      </nav>
      <main>
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<style is:global>
  :root {
    --max-width: 900px;
    --bg-color: #f5f5f5;
    --text-color: #2a2a2a;
    --accent-red: #ff3333;
    --accent-brown: #8b4513;
    --accent-tan: #d2b48c;
    --rust-color: #b7410e;
    --gradient-start: #f5f5f5;
    --gradient-end: #d2b48c;
  }

  [data-theme="dark"] {
    --bg-color: #2a2a2a;
    --text-color: #f5f5f5;
    --gradient-start: #2a2a2a;
    --gradient-end: #4a3525;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Space Mono', monospace;
    color: var(--text-color);
    transition: background-color 0.3s, color 0.3s;
    min-height: 100vh;
  }

  #bgCanvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  .content-wrapper {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    position: relative;
    z-index: 1;
  }

  nav {
    border-bottom: 2px solid var(--text-color);
    padding: 1rem 0;
    margin-bottom: 2rem;
    background-color: var(--bg-color);
    position: sticky;
    top: 0;
    z-index: 100;
    width: 100%;
  }

  .nav-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo {
    font-family: 'VT323', monospace;
    font-size: 2rem;
    color: var(--rust-color);
    text-shadow: 2px 2px var(--accent-tan);
  }

  .nav-links {
    display: flex;
    gap: 2rem;
    align-items: center;
  }

  .nav-links a {
    color: var(--text-color);
    text-decoration: none;
    font-family: 'VT323', monospace;
    font-size: 1.2rem;
    position: relative;
  }

  .nav-links a:hover::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--rust-color);
  }

  #theme-toggle {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    padding: 0.5rem;
  }

  .theme-icon {
    transition: transform 0.3s ease;
  }

  #theme-toggle:hover .theme-icon {
    transform: rotate(360deg);
  }

  main {
    flex: 1;
    width: 100%;
  }

  h1, h2, h3 {
    font-family: 'VT323', monospace;
  }

  .pixel-border {
    border: 2px solid var(--text-color);
    position: relative;
  }

  .pixel-border::after {
    content: '';
    position: absolute;
    bottom: -4px;
    right: -4px;
    width: 100%;
    height: 100%;
    background: var(--rust-color);
    z-index: -1;
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 0 1rem;
    }
  }
</style>

<script>
  class Particle {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    opacity: number;

    constructor(canvas: HTMLCanvasElement) {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.size = Math.random() * 2;
      this.speedX = Math.random() * 0.5 - 0.25;
      this.speedY = Math.random() * 0.5 - 0.25;
      this.opacity = Math.random() * 0.5 + 0.2;
    }

    update(canvas: HTMLCanvasElement) {
      this.x += this.speedX;
      this.y += this.speedY;

      if (this.x > canvas.width) this.x = 0;
      if (this.x < 0) this.x = canvas.width;
      if (this.y > canvas.height) this.y = 0;
      if (this.y < 0) this.y = canvas.height;
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.fillStyle = `rgba(var(--text-color-rgb), ${this.opacity})`;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  const canvas = document.getElementById('bgCanvas') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d');
  const particles: Particle[] = [];
  const particleCount = 50;

  function initCanvas() {
    if (!canvas) return;
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Clear existing particles
    particles.length = 0;

    // Create new particles
    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle(canvas));
    }
  }

  function animate() {
    if (!ctx) return;
    
    const gradientStart = getComputedStyle(document.documentElement)
      .getPropertyValue('--gradient-start').trim();
    const gradientEnd = getComputedStyle(document.documentElement)
      .getPropertyValue('--gradient-end').trim();
    
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, gradientStart);
    gradient.addColorStop(1, gradientEnd);
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    particles.forEach(particle => {
      particle.update(canvas);
      particle.draw(ctx);
    });
    
    requestAnimationFrame(animate);
  }

  // Initialize canvas and start animation
  initCanvas();
  animate();

  // Handle window resize
  window.addEventListener('resize', initCanvas);

  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  
  function updateTheme(isDark: boolean) {
    document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
    const toggle = document.querySelector('.theme-icon');
    if (toggle) {
      toggle.textContent = isDark ? 'ðŸŒ™' : 'ðŸŒ¸';
    }
  }

  themeToggle?.addEventListener('click', () => {
    const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
    updateTheme(!isDark);
  });

  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  updateTheme(prefersDark);
</script>