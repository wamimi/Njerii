---
import '@fontsource/vt323';
import '@fontsource/space-mono';
import Footer from '../components/Footer.astro';
import avatar from '../assets/avatar.jpg';

interface Props {
  title: string;
}

const { title } = Astro.props;
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Njerii's Personal Website" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={avatar.src} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="stars"></div>
    <div class="content-wrapper">
      <nav>
        <div class="nav-content">
          <div class="logo">„É≥„Ç∏„Çß„É™„Éº</div>
          <div class="nav-links">
            {currentPath !== '/' && (
              <a 
                href="#"
                onclick="window.history.back(); return false;"
                class="back-button"
                title="Go back"
              >
                ‚Üê
              </a>
            )}
            <a href="/">Blog</a>
            <a href="/lab">Lab Notes</a>
            <a href="/about">About</a>
            <button id="theme-toggle" aria-label="Toggle theme">
              <span class="theme-icon">üå∏</span>
            </button>
          </div>
        </div>
      </nav>
      <main>
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<style is:global>
  :root {
    --max-width: 900px;
    --bg-color: #f5f5f5;
    --text-color: #2a2a2a;
    --accent-red: #ff3333;
    --accent-brown: #8b4513;
    --accent-tan: #d2b48c;
    --rust-color: #b7410e;
    --gradient-start: #f5f5f5;
    --gradient-end: #d2b48c;
  }

  [data-theme="dark"] {
    --bg-color: #2a2a2a;
    --text-color: #f5f5f5;
    --gradient-start: #2a2a2a;
    --gradient-end: #4a3525;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Space Mono', monospace;
    color: var(--text-color);
    transition: background-color 0.3s, color 0.3s;
    min-height: 100vh;
    background: linear-gradient(45deg, var(--gradient-start), var(--gradient-end));
  }

  .stars {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 0;
    background: transparent;
  }

  @keyframes twinkle {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }

  .star {
    position: absolute;
    width: 2px;
    height: 2px;
    background: var(--rust-color);
    opacity: 0;
    animation: twinkle ease-in-out infinite;
  }

  .content-wrapper {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    position: relative;
    z-index: 1;
  }

  nav {
    border-bottom: 2px solid var(--text-color);
    padding: 1rem 0;
    margin-bottom: 2rem;
    background-color: var(--bg-color);
    position: sticky;
    top: 0;
    z-index: 100;
    width: 100%;
  }

  .nav-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo {
    font-family: 'VT323', monospace;
    font-size: 2rem;
    color: var(--rust-color);
    text-shadow: 2px 2px var(--accent-tan);
  }

  .nav-links {
    display: flex;
    gap: 2rem;
    align-items: center;
  }

  .nav-links a {
    color: var(--text-color);
    text-decoration: none;
    font-family: 'VT323', monospace;
    font-size: 1.2rem;
    position: relative;
  }

  .nav-links a:hover::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--rust-color);
  }

  #theme-toggle {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    padding: 0.5rem;
  }

  .theme-icon {
    transition: transform 0.3s ease;
  }

  #theme-toggle:hover .theme-icon {
    transform: rotate(360deg);
  }

  main {
    flex: 1;
    width: 100%;
  }

  h1, h2, h3 {
    font-family: 'VT323', monospace;
  }

  .pixel-border {
    border: 2px solid var(--text-color);
    position: relative;
  }

  .pixel-border::after {
    content: '';
    position: absolute;
    bottom: -4px;
    right: -4px;
    width: 100%;
    height: 100%;
    background: var(--rust-color);
    z-index: -1;
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 0 1rem;
    }
  }

  /* Shooting Star Animation */
  @keyframes shoot {
    0% {
      transform: translate(-100%, 100%) rotate(45deg);
      opacity: 1;
    }
    100% {
      transform: translate(100%, -100%) rotate(45deg);
      opacity: 0;
    }
  }

  .shooting-star {
    position: absolute;
    width: 2px;
    height: 10px;
    background: white;
    opacity: 0;
    animation: shoot 1s linear infinite;
  }

  /* Blinking Cursor for Navigation Links */
  .nav-links a::after {
    content: '|';
    opacity: 0;
    animation: blink 1s infinite;
  }

  @keyframes blink {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }

  /* Typing Animation for Headings */
  .typing {
    display: inline-block;
    overflow: hidden;
    white-space: nowrap;
    border-right: 2px solid var(--rust-color);
    animation: typing 3s steps(40, end), blink-caret 0.75s step-end infinite;
  }

  @keyframes typing {
    from { width: 0; }
    to { width: 100%; }
  }

  @keyframes blink-caret {
    from, to { border-color: transparent; }
    50% { border-color: var(--rust-color); }
  }

  /* Custom Cursor */
  body {
    cursor: none;
  }

  .custom-cursor {
    position: fixed;
    width: 16px;
    height: 16px;
    background: var(--rust-color);
    border-radius: 50%;
    pointer-events: none;
    transform: translate(-50%, -50%);
    z-index: 1000;
    transition: transform 0.1s ease, width 0.2s ease, height 0.2s ease;
  }

  .custom-cursor.hover {
    width: 32px;
    height: 32px;
    background: white;
  }

  /* Glitch Effects */
  @keyframes glitch {
    0% { transform: translate(0); }
    20% { transform: translate(-2px, 2px); }
    40% { transform: translate(2px, -2px); }
    60% { transform: translate(-2px, 2px); }
    80% { transform: translate(2px, -2px); }
    100% { transform: translate(0); }
  }

  .glitch {
    animation: glitch 0.5s infinite;
  }

  .glitch:hover {
    animation: none;
  }
  /* Add back button styles */
  .nav-links .back-button {
    color: var(--text-color);
    text-decoration: none;
    font-family: 'VT323', monospace;
    font-size: 1.2rem;
    margin-right: 1rem;
    position: relative;
    padding: 0.2rem 0.5rem;
    border: 1px solid var(--rust-color);
    border-radius: 4px;
  }

  .nav-links .back-button:hover {
    background-color: rgba(183, 65, 14, 0.1);
  }

  .nav-links .back-button:hover::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--rust-color);
  }

  @media (max-width: 768px) {
    .nav-links .back-button {
      margin-right: 0.5rem;
      padding: 0.1rem 0.3rem;
    }
  }
</style>

<script>
  // Function to update the theme
  function updateTheme(isDark) {
    document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
    const toggle = document.querySelector('.theme-icon');
    if (toggle) {
      toggle.textContent = isDark ? 'üåô' : 'üå∏';
    }
    // Save the theme preference to localStorage
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  }

  // Function to load the theme preference
  function loadTheme() {
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const isDark = savedTheme ? savedTheme === 'dark' : prefersDark;
    updateTheme(isDark);
  }

  // Load the theme when the page loads
  loadTheme();

  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  themeToggle?.addEventListener('click', () => {
    const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
    updateTheme(!isDark);
  });

  // Stars and Shooting Stars
  function createStar() {
    const star = document.createElement('div');
    star.className = 'star';
    star.style.left = `${Math.random() * 100}%`;
    star.style.top = `${Math.random() * 100}%`;
    star.style.animationDuration = `${Math.random() * 3 + 2}s`;
    star.style.animationDelay = `${Math.random() * 2}s`;
    return star;
  }

  function initStars() {
    const container = document.querySelector('.stars');
    if (!container) return;

    // Creates initial stars
    for (let i = 0; i < 50; i++) {
      container.appendChild(createStar());
    }
  }

  // Initializes stars
  initStars();

  // Mouse-Reactive Stars
  document.addEventListener('mousemove', (e) => {
    const stars = document.querySelectorAll('.star');
    stars.forEach(star => {
      const speed = 0.05; // Adjust sensitivity
      const x = (e.clientX - window.innerWidth / 2) * speed;
      const y = (e.clientY - window.innerHeight / 2) * speed;
      star.style.transform = `translate(${x}px, ${y}px)`;
    });
  });

  // Shooting Stars
  function createShootingStar() {
    const shootingStar = document.createElement('div');
    shootingStar.className = 'shooting-star';
    shootingStar.style.left = `${Math.random() * 100}%`;
    shootingStar.style.top = `${Math.random() * 100}%`;
    shootingStar.style.animationDuration = `${Math.random() * 2 + 1}s`;
    return shootingStar;
  }

  function initShootingStars() {
    const container = document.querySelector('.stars');
    if (!container) return;

    setInterval(() => {
      container.appendChild(createShootingStar());
      setTimeout(() => {
        container.removeChild(container.lastChild);
      }, 2000); // Removes after animation ends
    }, 3000); // Adds a new shooting star every 3 seconds
  }

  // Initialize Shooting Stars
  initShootingStars();

  // Typing Animation for Headings
  function typeText(element) {
    const text = element.textContent;
    element.textContent = '';
    let i = 0;
    const typingInterval = setInterval(() => {
      if (i < text.length) {
        element.textContent += text.charAt(i);
        i++;
      } else {
        clearInterval(typingInterval);
      }
    }, 100);
  }

  // Typing Animation to Headings
  document.querySelectorAll('h1, h2, h3').forEach(heading => {
    heading.classList.add('typing');
    typeText(heading);
  });

  // Custom Cursor
  const cursor = document.createElement('div');
  cursor.className = 'custom-cursor';
  document.body.appendChild(cursor);

  document.addEventListener('mousemove', (e) => {
    cursor.style.left = `${e.clientX}px`;
    cursor.style.top = `${e.clientY}px`;
  });

  document.querySelectorAll('a, button').forEach(element => {
    element.addEventListener('mouseenter', () => {
      cursor.classList.add('hover');
    });
    element.addEventListener('mouseleave', () => {
      cursor.classList.remove('hover');
    });
  });

  // Glitch Effects
  document.querySelectorAll('.glitch').forEach(element => {
    setInterval(() => {
      element.classList.toggle('glitch');
    }, 3000); // glitch every 3 seconds
  });
</script>