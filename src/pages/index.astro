---
import Layout from '../layouts/Layout.astro';
import BlogPost from '../components/BlogPost.astro';
import { getCollection } from 'astro:content';

// Fetch and sort blog posts by publication date
const posts = (await getCollection('blog')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const latestPost = posts[0]; // Get the latest post

// Try to fetch projects collection if it exists
let featuredProject = null;
try {
  const projects = await getCollection('projects');
  const featuredProjects = projects.filter(project => project.data.featured)
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
  
  if (featuredProjects.length > 0) {
    // Only import ProjectCard if we have featured projects
    const { default: ProjectCard } = await import('../components/ProjectCard.astro');
    featuredProject = { 
      data: featuredProjects[0].data, 
      slug: featuredProjects[0].slug,
      ProjectCard
    };
  }
} catch (error) {
  console.error('Error loading projects:', error);
}
---

<Layout title="Njerii">
  <div class="container">
    <!-- Hero Section -->
    <div class="hero">
      <h1 class="title">Hajimemashite, Njerii desu!</h1>
      <p class="intro">RustaceanðŸ¦€ | Web3</p>
    </div>
    
    <!-- Hero Image -->
    <div class="hero-image-container">
      <img 
        src="/images/rustacean.jpg" 
        alt="beautiful skies" 
        class="hero-image"
      />
    </div>
    
    <!-- Content Section -->
    <div class="content-section">
      <h2 class="section-title">Latest Post</h2>
      <div class="blog-grid">
        <BlogPost
          title={latestPost.data.title}
          description={latestPost.data.description}
          pubDate={latestPost.data.pubDate}
          tags={latestPost.data.tags}
          url={`/blog/${latestPost.slug}`}
        />
      </div>
      <a href="/blog" class="read-more">View All Posts â†’</a>
    </div>

    <!-- Secret Message -->
    <div id="secret-message" class="hidden">
      <p>You are my crush ðŸ’–</p>
    </div>

    <!-- Background Music -->
    <audio id="background-music" loop>
      <source src="/audio/saralinaa.mp3" type="audio/mpeg" />
      Your browser does not support the audio element.
    </audio>
    <button id="music-toggle" aria-label="Toggle music">
      <span class="music-icon">ðŸŽµ</span>
    </button>
  </div>
</Layout>

<style>
  .container {
    padding: 2rem 0;
    display: flex;
    flex-direction: column;
    gap: 2rem; /* Reduced gap for better spacing */
  }

  /* Glitch Heading */
  .glitch {
    font-size: 2.5rem; /* Reduced font size */
    text-align: center;
    color: var(--rust-color);
    animation: glitch 3s infinite; /* slower animation */
    margin-bottom: 1rem; /* Reduced margin */
    position: relative;
  }

  @keyframes glitch {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    10%, 30%, 50%, 70%, 90% {
      opacity: 0.8;
      transform: scale(1.02);
    }
    20%, 40%, 60%, 80% {
      opacity: 0.9;
      transform: scale(0.98);
    }
  }

  /* Secret Message */
  .hidden {
    display: none;
  }

  #secret-message {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: var(--bg-color);
    padding: 1rem;
    border: 2px solid var(--rust-color);
    border-radius: 0.5rem;
    box-shadow: 0 0 10px rgba(183, 65, 14, 0.3);
  }

  /* Background Music */
  #music-toggle {
    position: fixed;
    bottom: 20px;
    left: 20px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.5rem;
    padding: 0.5rem;
  }

  .music-icon {
    transition: transform 0.3s ease;
  }

  #music-toggle:hover .music-icon {
    transform: rotate(360deg);
  }

  /* Styles */
  .hero {
    text-align: center;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1rem;
    margin: -1rem;
  }

  .title {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--rust-color);
  }

  .intro {
    font-size: 1.5rem;
    font-family: 'VT323', monospace;
    color: var(--accent-brown);
  }

  .hero-image-container {
    width: 100%;
    display: flex;
    justify-content: center;
    padding: 2rem 0;
    margin: -2rem 0;
  }

  .hero-image {
    width: 100%;
    max-width: 800px;
    height: auto;
    image-rendering: pixelated;
    filter: drop-shadow(0 0 8px rgba(183, 65, 14, 0.3));
  }

  .content-section {
    background: rgba(255, 255, 255, 0.05);
    padding: 2rem;
    border-radius: 1rem;
    margin: -1rem;
  }

  .project-section {
    margin-top: 2rem;
  }

  .section-title {
    font-size: 2rem;
    color: var(--rust-color);
    margin-bottom: 2rem;
    text-align: center;
  }

  .blog-grid, .project-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  @media (max-width: 768px) {
    .glitch {
      font-size: 2rem; /* smaller font size for mobile */
    }

    .hero {
      padding: 1rem;
    }

    .title {
      font-size: 2.5rem;
    }

    .intro {
      font-size: 1.2rem;
    }

    .hero-image-container {
      padding: 1rem 0;
    }
  }
  .read-more {
    display: inline-block;
    margin-top: 1rem;
    font-family: 'VT323', monospace;
    font-size: 1.2rem;
    color: var(--rust-color);
    text-decoration: none;
  }

  .read-more:hover {
    text-decoration: underline;
  }
</style>

<script>
  // Secret Message
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.shiftKey && e.key === 'C') {
      const secretMessage = document.getElementById('secret-message');
      if (secretMessage) {
        secretMessage.classList.toggle('hidden');
      }
    }
  });

  // Background Music
  const musicToggle = document.getElementById('music-toggle');
  const backgroundMusic = document.getElementById('background-music') as HTMLAudioElement | null;

  if (musicToggle) {
    musicToggle.addEventListener('click', () => {
      if (backgroundMusic && !backgroundMusic.paused) {
        backgroundMusic.pause();
        const icon = musicToggle.querySelector('.music-icon');
        if (icon) {
          icon.textContent = 'ðŸ”‡';
        }
      } else if (backgroundMusic) {
        backgroundMusic.play().catch(err => {
          console.error('Error playing audio:', err);
        });
        const icon = musicToggle.querySelector('.music-icon');
        if (icon) {
          icon.textContent = 'ðŸŽµ';
        }
      }
    });
  }
</script>